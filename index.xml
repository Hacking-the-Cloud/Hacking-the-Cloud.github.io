<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hacking the Cloud</title><link>https://hackingthe.cloud/</link><description>Recent content on Hacking the Cloud</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Sun, 26 Jan 2020 04:15:05 +0900</lastBuildDate><atom:link href="https://hackingthe.cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>Local Privilege Escalation: User Data</title><link>https://hackingthe.cloud/aws/exploitation/local-priv-esc-mod-instance-att/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/exploitation/local-priv-esc-mod-instance-att/</guid><description>Required IAM Permission: modify-instance-attribute
Recommended but not required: start-instances, describe-instances, stop-instances (makes things go faster, requires less enumeration. The instance must be stopped to alter the user data)
If an adversary has access to the modify-instance attribute permission they can leverage it to escalate to root/System on an EC2 instance.
Usually, user data scripts are only run the first time the instance is started, however this can be changed using cloud-init to run every time the instance restarts.</description></item><item><title>Local Privilege Escalation: User Data 2</title><link>https://hackingthe.cloud/aws/exploitation/local-priv-esc-user-data-s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/exploitation/local-priv-esc-user-data-s3/</guid><description>A common pattern when using EC2 is to define a user data script to be run when an instance is first started or after a reboot. These scripts are typically used to install software, download and set a config, etc. Oftentimes the scripts and packages are pulled from S3 and this introduces an opportunity for a developer/ops person to make a mistake.
If the IAM role is too permissive and allows the role to write to that location, an adversary can leverage this for privilege escalation.</description></item><item><title>AWS Consoler</title><link>https://hackingthe.cloud/aws/persistence/aws_consoler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/persistence/aws_consoler/</guid><description>Original Research: Ian Williams
Link to Tool: GitHub
When performing an AWS assessment you will likely encounter IAM Credentials. Traditionally, the majority of these that you would find would only be usable from the AWS CLI. Using a tool called AWS Consoler you can create links that will allow you to access the AWS Console. In this example we will walk through gathering credentials and using those credentials along with Consoler to generate a Console link.</description></item><item><title>Bypass Credential Exfiltration Detection</title><link>https://hackingthe.cloud/aws/avoiding-detection/steal-keys-undetected/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/avoiding-detection/steal-keys-undetected/</guid><description>A common occurrence while performing penetration testing on AWS is leveraging SSRF, XXE, command injection, etc. to steal IAM credentials from the meta data service. This can allow you to execute API calls you otherwise wouldn&amp;rsquo;t be able to (especially if you can&amp;rsquo;t get code execution on the EC2 instance), however it comes at a penalty. There is a GuardDuty rule which detects IAM credentials being used outside of EC2 called IAMUser/InstanceCredentialExfiltration.</description></item><item><title>Bypass GuardDuty Pentest Findings</title><link>https://hackingthe.cloud/aws/avoiding-detection/guardduty-pentest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/avoiding-detection/guardduty-pentest/</guid><description>When making AWS API requests on common penetration testing OS&amp;rsquo;s GuardDuty will detect this and trigger a PenTest Finding.
This is caused by the user agent name that is passed in the API request. By modifying that we can prevent GuardDuty from detecting that we are operating from a &amp;ldquo;pentest&amp;rdquo; Linux distribution.
If your assessment requires you to remain undetected it&amp;rsquo;s probably easier to leverage a &amp;ldquo;safe&amp;rdquo; OS like Ubuntu, Mac OS, or Windows.</description></item><item><title>Connection Tracking</title><link>https://hackingthe.cloud/aws/general-knowledge/connection-tracking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/general-knowledge/connection-tracking/</guid><description>Security Groups in AWS have an interesting capability known as Connection Tracking. This allows the security groups to track information about the network traffic and allow/deny that traffic based on the Security Group rules.
There are two kinds of traffic flows; tracked and untracked. For example the AWS documentation mentions a tracked flow as the following, &amp;ldquo;if you initiate an ICMP ping command to your instance from your home computer, and your inbound security group rules allow ICMP traffic, information about the connection (including the port information) is tracked.</description></item><item><title>Get Account ID from AWS Access Keys</title><link>https://hackingthe.cloud/aws/enumeration/get-account-id-from-keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/enumeration/get-account-id-from-keys/</guid><description>While performing an assessment in AWS it is not uncommon to come across access keys and not know what account they are associated with. If your scope is defined by the AWS account ID, this may pose a problem as you&amp;rsquo;d likely not want to use them if they are out of scope.
To solve this problem you can use sts:GetAccessKeyInfo to return the account ID of the credentials. This action will only be logged to the account calling the action (which should be your account, not the target&amp;rsquo;s).</description></item><item><title>IAM ID Identifiers</title><link>https://hackingthe.cloud/aws/general-knowledge/iam-key-identifiers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/general-knowledge/iam-key-identifiers/</guid><description>Last updated: 07/27/2020
Source
Prefix Entity Type ABIA AWS STS service bearer token ACCA Context-specific credential AGPA Group AIDA IAM user AIPA Amazon EC2 instance profile AKIA Access key ANPA Managed policy ANVA Version in a managed policy APKA Public key AROA Role ASCA Certificate ASIA Temporary (AWS STS) keys</description></item><item><title>Role Chain Juggling</title><link>https://hackingthe.cloud/aws/persistence/role-chain-juggling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/persistence/role-chain-juggling/</guid><description>Original Research: Daniel Heinsen
Link to Tool: GitHub
When doing an assessment in AWS you may want to maintain access for an extended period of time. You may not have the ability to create a new IAM user, or create a new key for existing users. How else can you extend your access? Role Chain Juggling.
Role chaining is a recognized functionality of AWS in that you can use one assumed role to assume another one.</description></item><item><title>Steal EC2 Metadata Credentials via SSRF</title><link>https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/</guid><description>One of the most commonly taught tactics in AWS exploitation is the use of Server Side Request Forgery (SSRF) to access the EC2 metadata service.
All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as it&amp;rsquo;s IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role.</description></item><item><title>Steal IAM Credentials and Event Data from Lambda</title><link>https://hackingthe.cloud/aws/exploitation/lambda-steal-iam-credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/exploitation/lambda-steal-iam-credentials/</guid><description>In Lambda, IAM credentials are passed into the function via environment variables. The benefit for the adversary is that these credentials can be leaked via file read vulnerabilities such as XML External Entity attacks or SSRF that allows the file protocol. This is because &amp;ldquo;everything is a file&amp;rdquo;.
IAM credentials can be accessed via reading /proc/self/environ
In the event that /proc/self/environ is blocked by a WAF, check if you can read the environment variables of other processes.</description></item><item><title>Unauthenticated Enumeration of IAM Users and Roles</title><link>https://hackingthe.cloud/aws/enumeration/enum_iam_user_role/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/enumeration/enum_iam_user_role/</guid><description>Original Research: Spencer Gietzen
Link to Tool: GitHub
Link to Pacu Module: GitHub
With just the account id of a target you can enumerate the names of IAM users and roles by abusing Resource-Based Policies.
There are a few ways to do this, for example, Pacu&amp;rsquo;s module will attempt to change the AssumeRole policy of a role in your account and specify a role in another account.
Another way would be to use S3 Bucket Policies.</description></item><item><title>Whoami - Get Principal Name From Keys</title><link>https://hackingthe.cloud/aws/enumeration/whoami/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/enumeration/whoami/</guid><description>After finding or stealing IAM credentials during an assessment you will need to identify what they are used for, or if they are valid. The most common method for doing so would be the get-caller-identity API call. This is beneficial for a few reasons, in particular that it requires no special permissions to call.
Unfortunately (while unlikely) there is the possibility that this API call may be monitored for sensitive accounts.</description></item></channel></rss>