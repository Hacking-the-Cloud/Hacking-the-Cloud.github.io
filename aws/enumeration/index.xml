<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Enumeration on Hacking the Cloud</title><link>https://hackingthe.cloud/aws/enumeration/</link><description>Recent content in Enumeration on Hacking the Cloud</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><atom:link href="https://hackingthe.cloud/aws/enumeration/index.xml" rel="self" type="application/rss+xml"/><item><title>Brute Force IAM Permissions</title><link>https://hackingthe.cloud/aws/enumeration/brute_force_iam_permissions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/enumeration/brute_force_iam_permissions/</guid><description>Link to Tool: GitHub
When attacking AWS you may compromise credentials for an IAM user or role. This can be an excellent step to gain access to other resources, however it presents a problem for us. How do we know what we have access to? Unless these credentials have specific IAM permissions we won&amp;rsquo;t be able to look them up, and we may not have enough context clues from where we found the credentials to know about them.</description></item><item><title>Enumerate AWS Account ID from a Public S3 Bucket</title><link>https://hackingthe.cloud/aws/enumeration/account_id_from_s3_bucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/enumeration/account_id_from_s3_bucket/</guid><description>Discovered by Ben Bridts
Original Research: link
Link to Tool: s3-account-search
By leveraging the s3:ResourceAccount policy condition, we can identify the AWS account ID associated with a public S3 bucket.
To test this, you can use Grayhat Warfare&amp;rsquo;s list of public S3 buckets.
You will need a role with s3:getObject and s3:ListBucket permissions, and you can specify the target bucket as the resource for your policy. Alternatively you can set a resource of &amp;lsquo;*&amp;rsquo; to quickly test multiple buckets.</description></item><item><title>Enumerate Permissions without Logging to CloudTrail</title><link>https://hackingthe.cloud/aws/enumeration/stealth_perm_enum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/enumeration/stealth_perm_enum/</guid><description>Original Research: Nick Frichette
Link to Tool: aws_stealth_perm_enum
After compromising an IAM credential while attacking AWS, your next task will be to determine what permissions that credential has scoped to them.
Aside from guessing, enumerating these permissions would typically require a tool to brute force them like enumerate-iam (which is a fantastic tool). The problem of course is that this will generate a ton of CloudTrail logs and will alert any defender.</description></item><item><title>Get Account ID from AWS Access Keys</title><link>https://hackingthe.cloud/aws/enumeration/get-account-id-from-keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/enumeration/get-account-id-from-keys/</guid><description>While performing an assessment in AWS it is not uncommon to come across access keys and not know what account they are associated with. If your scope is defined by the AWS account ID, this may pose a problem as you&amp;rsquo;d likely not want to use them if they are out of scope.
To solve this problem you can use sts:GetAccessKeyInfo to return the account ID of the credentials. This action will only be logged to the account calling the action (which should be your account, not the target&amp;rsquo;s).</description></item><item><title>Unauthenticated Enumeration of IAM Users and Roles</title><link>https://hackingthe.cloud/aws/enumeration/enum_iam_user_role/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/enumeration/enum_iam_user_role/</guid><description>Original Research: Spencer Gietzen
Link to Tool: GitHub
Link to Pacu Module: GitHub
With just the account id of a target you can enumerate the names of IAM users and roles by abusing Resource-Based Policies.
There are a few ways to do this, for example, Pacu&amp;rsquo;s module will attempt to change the AssumeRole policy of a role in your account and specify a role in another account.
Another way would be to use S3 Bucket Policies.</description></item><item><title>Whoami - Get Principal Name From Keys</title><link>https://hackingthe.cloud/aws/enumeration/whoami/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/enumeration/whoami/</guid><description>After finding or stealing IAM credentials during an assessment you will need to identify what they are used for, or if they are valid. The most common method for doing so would be the get-caller-identity API call. This is beneficial for a few reasons, in particular that it requires no special permissions to call.
Unfortunately (while unlikely) there is the possibility that this API call may be monitored for sensitive accounts.</description></item></channel></rss>