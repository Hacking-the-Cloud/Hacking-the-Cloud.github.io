<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exploitation on Hacking the Cloud</title><link>https://hackingthe.cloud/aws/exploitation/</link><description>Recent content in Exploitation on Hacking the Cloud</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><atom:link href="https://hackingthe.cloud/aws/exploitation/index.xml" rel="self" type="application/rss+xml"/><item><title>Local Privilege Escalation: User Data</title><link>https://hackingthe.cloud/aws/exploitation/local-priv-esc-mod-instance-att/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/exploitation/local-priv-esc-mod-instance-att/</guid><description>Required IAM Permission: modify-instance-attribute
Recommended but not required: start-instances, describe-instances, stop-instances (makes things go faster, requires less enumeration. The instance must be stopped to alter the user data)
If an adversary has access to the modify-instance attribute permission they can leverage it to escalate to root/System on an EC2 instance.
Usually, user data scripts are only run the first time the instance is started, however this can be changed using cloud-init to run every time the instance restarts.</description></item><item><title>Local Privilege Escalation: User Data 2</title><link>https://hackingthe.cloud/aws/exploitation/local-priv-esc-user-data-s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/exploitation/local-priv-esc-user-data-s3/</guid><description>A common pattern when using EC2 is to define a user data script to be run when an instance is first started or after a reboot. These scripts are typically used to install software, download and set a config, etc. Oftentimes the scripts and packages are pulled from S3 and this introduces an opportunity for a developer/ops person to make a mistake.
If the IAM role is too permissive and allows the role to write to that location, an adversary can leverage this for privilege escalation.</description></item><item><title>Simple Route53/Cloudfront/s3 subdomain takeover</title><link>https://hackingthe.cloud/aws/exploitation/orphaned_-cloudfront_or_dns_takeover_via_s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/exploitation/orphaned_-cloudfront_or_dns_takeover_via_s3/</guid><description>Utilizing various enumeration techniques for recon and enumeration, an attacker can discover orphaned Cloudfront distributions and/or DNS Records that are attempting to serve content from an S3 bucket that no longer exists. There are numerous tools to do this, but I have been using dwatch combined with CTFR
Essentially you need a list of domains to check. Create a domain list using CTFR or amass or the like, and then utilize a tool like dwatch to test each host to look for a specific error page that contains the text &amp;ldquo;NoSuchBucket&amp;rdquo;</description></item><item><title>Steal EC2 Metadata Credentials via SSRF</title><link>https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/</guid><description>One of the most commonly taught tactics in AWS exploitation is the use of Server Side Request Forgery (SSRF) to access the EC2 metadata service.
All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role.</description></item><item><title>Steal IAM Credentials and Event Data from Lambda</title><link>https://hackingthe.cloud/aws/exploitation/lambda-steal-iam-credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/exploitation/lambda-steal-iam-credentials/</guid><description>In Lambda, IAM credentials are passed into the function via environment variables. The benefit for the adversary is that these credentials can be leaked via file read vulnerabilities such as XML External Entity attacks or SSRF that allows the file protocol. This is because &amp;ldquo;everything is a file&amp;rdquo;.
IAM credentials can be accessed via reading /proc/self/environ
In the event that /proc/self/environ is blocked by a WAF, check if you can read the environment variables of other processes.</description></item></channel></rss>