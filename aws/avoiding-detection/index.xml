<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avoid Detection on Hacking the Cloud</title><link>https://hackingthe.cloud/aws/avoiding-detection/</link><description>Recent content in Avoid Detection on Hacking the Cloud</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><atom:link href="https://hackingthe.cloud/aws/avoiding-detection/index.xml" rel="self" type="application/rss+xml"/><item><title>Bypass Credential Exfiltration Detection</title><link>https://hackingthe.cloud/aws/avoiding-detection/steal-keys-undetected/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/avoiding-detection/steal-keys-undetected/</guid><description>A common occurrence while performing penetration testing on AWS is leveraging SSRF, XXE, command injection, etc. to steal IAM credentials from the meta data service. This can allow you to execute API calls you otherwise wouldn&amp;rsquo;t be able to (especially if you can&amp;rsquo;t get code execution on the EC2 instance), however it comes at a penalty. There is a GuardDuty rule which detects IAM credentials being used outside of EC2 called IAMUser/InstanceCredentialExfiltration.</description></item><item><title>Bypass GuardDuty Pentest Findings</title><link>https://hackingthe.cloud/aws/avoiding-detection/guardduty-pentest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/avoiding-detection/guardduty-pentest/</guid><description>When making AWS API requests on common penetration testing OS&amp;rsquo;s GuardDuty will detect this and trigger a PenTest Finding.
This is caused by the user agent name that is passed in the API request. By modifying that we can prevent GuardDuty from detecting that we are operating from a &amp;ldquo;pentest&amp;rdquo; Linux distribution.
If your assessment requires you to remain undetected it&amp;rsquo;s probably easier to leverage a &amp;ldquo;safe&amp;rdquo; OS like Ubuntu, Mac OS, or Windows.</description></item><item><title>Bypass GuardDuty Tor Client Findings</title><link>https://hackingthe.cloud/aws/avoiding-detection/guardduty-tor-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hackingthe.cloud/aws/avoiding-detection/guardduty-tor-client/</guid><description>UnauthorizedAccess:EC2/TorClient is a high severity GuardDuty finding that fires when an EC2 instance is detected making connections to Tor Guard or Authority nodes. According to the documentation, &amp;ldquo;this finding may indicate unauthorized access to your AWS resources with the intent of hiding the attacker&amp;rsquo;s true identity&amp;rdquo;.
AWS determines this by comparing connections to the public list of Tor nodes. To those familiar with the Tor project, this is a common problem.</description></item></channel></rss>