[{"content":"Original Research: Ian Williams\nLink to Tool: GitHub\nWhen performing an AWS assessment you will likely encounter IAM Credentials. Traditionally, the majority of these that you would find would only be usable from the AWS CLI. Using a tool called AWS Consoler you can create links that will allow you to access the AWS Console. In this example we will walk through gathering credentials and using those credentials along with Consoler to generate a Console link.\nFirst, we need to gather valid IAM credentials. These are typically found a number of different ways. In this example, we have shell access to an EC2 instance with an attached role and we will curl the metadata service to access them.\nNext, install and compile AWS Consoler (install Python dependencies with pip and then do a sudo make install).\nFrom here invoke the Consoler tool and provide the -a (access key) -s (secret access key) and -t (session token) flags along with the retrieved values.\nThis will generate a link you can use to access the AWS Console.\n","description":"Leverage stolen credentials to use the AWS Console","id":0,"section":"aws","tags":null,"title":"AWS Consoler","uri":"https://hackingthe.cloud/aws/persistence/aws_consoler/"},{"content":"A common occurrence while performing penetration testing on AWS is leveraging SSRF, XXE, command injection, etc. to steal IAM credentials from the meta data service. This can allow you to execute API calls you otherwise wouldn\u0026rsquo;t be able to (especially if you can\u0026rsquo;t get code execution on the EC2 instance), however it comes at a penalty. There is a GuardDuty rule which detects IAM credentials being used outside of EC2 called IAMUser/InstanceCredentialExfiltration.\nThe wording is very specific, \u0026ldquo;This finding informs you of attempts to run AWS API operations from a host outside of EC2\u0026rdquo;. It does not mean outside of EC2 instances in your account. It mean outside of EC2 AT ALL. As a result, you can use those credentials on ANY EC2 instance, including one you control. Doing so will not trigger the credential exfiltration GuardDuty finding.\n","description":"When stealing IAM credentials from an EC2 instance you can avoid a GuardDuty detection by using the keys from another EC2 instance","id":1,"section":"aws","tags":null,"title":"Bypass Credential Exfiltration Detection","uri":"https://hackingthe.cloud/aws/avoiding-detection/steal-keys-undetected/"},{"content":"When making AWS API requests on common penetration testing OS\u0026rsquo;s GuardDuty will detect this and trigger a PenTest Finding.\nThis is caused by the user agent name that is passed in the API request. By modifying that we can prevent GuardDuty from detecting that we are operating from a \u0026ldquo;pentest\u0026rdquo; Linux distribution.\nIf your assessment requires you to remain undetected it\u0026rsquo;s probably easier to leverage a \u0026ldquo;safe\u0026rdquo; OS like Ubuntu, Mac OS, or Windows.\r To do this, identify the location of your session.py in the botocore package. For example, on a default Kali Linux install it can be found at /usr/local/lib/python3.7/dist-packages/botocore/session.py.\nOn line 456 (at the time of writing), you should see the following.\nplatform.system() and platform.release() are similar to uname -o and uname -r. On a stock Kali install it will generate the following values.\nTo get around this, modify the code and replace it with legitimate user agent strings like those found in Pacu. With this capability you can mask your user agent to look like anything you want. Even arbitrary values like below.\n","description":"Prevent Kali Linux, ParrotOS, and Pentoo Linux from throwing GuardDuty alerts by modifying the User Agent string","id":2,"section":"aws","tags":null,"title":"Bypass GuardDuty Pentest Findings","uri":"https://hackingthe.cloud/aws/avoiding-detection/guardduty-pentest/"},{"content":"Security Groups in AWS have an interesting capability known as Connection Tracking. This allows the security groups to track information about the network traffic and allow/deny that traffic based on the Security Group rules.\nThere are two kinds of traffic flows; tracked and untracked. For example the AWS documentation mentions a tracked flow as the following, \u0026ldquo;if you initiate an ICMP ping command to your instance from your home computer, and your inbound security group rules allow ICMP traffic, information about the connection (including the port information) is tracked. Response traffic from the instance for the ping command is not tracked as a new request, but rather as an established connection and is allowed to flow out of the instance, even if your outbound security group rules restrict outbound ICMP traffic\u0026rdquo;.\nAn interesting side effect of this is that tracked connections are allowed to persist, even after a Security Group rule change.\nLet\u0026rsquo;s take a simple example: There is an EC2 instance that runs a web application. This EC2 instance has a simple Security Group that allows SSH, port 80, and port 443 inbound, and allows all traffic outbound. This EC2 instance is in a public subnet and is internet facing.\nWhile performing a penetration test you\u0026rsquo;ve gained command execution on this EC2 instance. In doing so, you pop a simple reverse shell. You work your magic on the box before eventually triggering an alert to our friendly neighborhood defender. They follow their runbooks which may borrow from the official AWS whitepaper on incident response.\nAs part of the \u0026ldquo;Isolate\u0026rdquo; step, the typical goal is to isolate the affected EC2 instance with either a restrictive Security Group or an explicit Deny NACL. The slight problem with this is that NACLs affect the entire subnet, and if you are operating in a space with a ton of EC2 instances the defender is unlikely to want to cause an outage for all of them. As a result, swapping the Security Group is the recommended procedure.\nThe defender switches the Security Group from the web and ssh one, to one that does not allow anything inbound or outbound.\nThe beauty of connection tracking is that because you\u0026rsquo;ve already established a connection with your shell, it will persist. So long as you ran the shell before the SG change, you can continue scouring the box and looking for other vulnerabilities.\nTo be clear, if the restrictive security group doesn\u0026rsquo;t allow for any outbound rules we won\u0026rsquo;t be able to communicate out (and if you\u0026rsquo;re using a beaconing C2 that will not function).\n","description":"Abuse security group connection tracking to maintain persistence even when security group rules are changed","id":3,"section":"aws","tags":null,"title":"Connection Tracking","uri":"https://hackingthe.cloud/aws/general-knowledge/connection-tracking/"},{"content":"Last updated: 07/27/2020\nSource\n   Prefix Entity Type     ABIA AWS STS service bearer token   ACCA Context-specific credential   AGPA Group   AIDA IAM user   AIPA Amazon EC2 instance profile   AKIA Access key   ANPA Managed policy   ANVA Version in a managed policy   APKA Public key   AROA Role   ASCA Certificate   ASIA Temporary (AWS STS) keys    ","description":"Chart of the IAM ID Prefixes","id":4,"section":"aws","tags":null,"title":"IAM ID Identifiers","uri":"https://hackingthe.cloud/aws/general-knowledge/iam-key-identifiers/"},{"content":"Required IAM Permission: modify-instance-attribute\nRecommended but not required: start-instances, describe-instances, stop-instances (makes things go faster, requires less enumeration. The instance must be stopped to alter the user data)\nIf an adversary has access to the modify-instance attribute permission they can leverage it to escalate to root/System on an EC2 instance.\nUsually, user data scripts are only run the first time the instance is started, however this can be changed using cloud-init to run every time the instance restarts.\nTo do this, first create a file in the following format.\nMIME-Version: 1.0 --// Content-Type: text/cloud-config; charset=\u0026quot;us-ascii\u0026quot; MIME-Version: 1.0 Content-Transfer-Encoding: 7bit Content-Disposition: attachment; filename=\u0026quot;cloud-config.txt\u0026quot; #cloud-config cloud_final_modules: - [scripts-user, always] --// Content-Type: text/x-shellscript; charset=\u0026quot;us-ascii\u0026quot; MIME-Version: 1.0 Content-Transfer-Encoding: 7bit Content-Disposition: attachment; filename=\u0026quot;userdata.txt\u0026quot; #!/bin/bash **commands here** --// Modify the commands here section to do whatever action you want. Setting a reverse shell, adding an ssh key to the default user, etc. are all good options.\nOnce you\u0026rsquo;ve done that, convert the file to base64. Linux can do this with the following command.\nbase64 file.txt \u0026gt; file.b64.txt\nWindows can do this with the following command.\ncertutil -encode file.txt tmp.b64 \u0026amp;\u0026amp; findstr /v /c:- tmp.b64 \u0026gt; file.b64.txt\nNow that you\u0026rsquo;ve base64 encoded your payload, you will leverage the modify-instance-attribute API call to change the user data of the target instance. Note: the instance will need to be stopped to modify its user data. You\u0026rsquo;ll either have to stop it yourself, or wait for something else to stop it.\naws ec2 modify-instance-attribute \\ --instance-id=xxx \\ --attribute userData \\ --value file://file.b64.txt With that change made, simply start the instance again and your command will be executed with root/System.\n","description":"Escalate privileges on an EC2 instance by modifying the user-data scripts with modify-instance-attribute","id":5,"section":"aws","tags":null,"title":"Local Privilege Escalation: User Data","uri":"https://hackingthe.cloud/aws/exploitation/local-priv-esc-mod-instance-att/"},{"content":"One of the most commonly taught tactics in AWS exploitation is the use of Server Side Request Forgery (SSRF) to access the EC2 metadata service.\nAll EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as it\u0026rsquo;s IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has we can steal those credentials.\nIt is also worth noting that shell access to the EC2 instance would also allow an adversary to gather these credentials.\nThe attack as described here will not work with IMDSv2. For more information and options please refer to the documentation. IMDSv1 is still the default for EC2, so it is worth identifying what version is in place.\r In this example there is a web server running on port 80 of the EC2 instance. This web server has a simple SSRF vulnerability, allowing us to make GET requests to arbitrary addresses. We can leverage this to make a request to http://169.254.169.254.\nTo determine if the EC2 instance has an IAM role associated with it, look for http://169.254.169.254/latest/meta-data/iam/. A 404 response indicates there is no IAM role associated. You may also get a 200 response that is empty, this indicates that there was an IAM Role however it has since been revoked.\nIf there is a valid role you can steal, make a request to http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent. In the example below we see that the role name is \u0026lsquo;ec2-default-ssm\u0026rsquo;.\nTo steal the credentials, append the role name to your previous query. For example, with the name above we\u0026rsquo;d query http://169.254.169.254/latest/meta-data/iam/security-credentials/ec2-default-ssm/.\nThese credentials can then be used in the AWS CLI or other means to make API calls as the IAM role.\n","description":"Old faithful; How to steal IAM Role credentials via the EC2 Metadata service via SSRF","id":6,"section":"aws","tags":null,"title":"Steal EC2 Metadata Credentials via SSRF","uri":"https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"},{"content":"Original Research: Spencer Gietzen\nLink to Tool: GitHub\nLink to Pacu Module: GitHub\nWith just the account id of a target you can enumerate the names of IAM users and roles by abusing Resource-Based Policies.\nThere are a few ways to do this, for example, Pacu\u0026rsquo;s module will attempt to change the AssumeRole policy of a role in your account and specify a role in another account.\nAnother way would be to use S3 Bucket Policies. Take the following example:\n\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;, \u0026quot;Statement\u0026quot;: [ { \u0026quot;Sid\u0026quot;: \u0026quot;Example permissions\u0026quot;, \u0026quot;Effect\u0026quot;: \u0026quot;Deny\u0026quot;, \u0026quot;Principal\u0026quot;: { \u0026quot;AWS\u0026quot;: \u0026quot;arn:aws:iam::123456789123:role/role_name\u0026quot; }, \u0026quot;Action\u0026quot;: \u0026quot;s3:ListBucket\u0026quot;, \u0026quot;Resource\u0026quot;: \u0026quot;arn:aws:s3:::*bucket you own*\u0026quot; } ] } You would apply this policy to a bucket you own. By specifying a principal in the target account (123456789123), you can determine if that principals exists. If setting the bucket policy succeeds you know the role exists. If it fails you know the role does not.\nDoing either of these things will generate a lot of CloudTrail events, specifically UpdateAssumeRolePolicy or PutBucketPolicy in your account. If your intention is to be stealthy is is not advised (or required) to use a targets credentials. Instead you should use your own.\r While this works for both IAM users and roles, this will also work with service-linked roles. This will allow you to enumerate various services the account uses, such as GuardDuty or Organizations.\r To automate this process you can use the Pacu Module or this which will attempt to brute force it for you.\nusage: main.py [-h] --id ID --my_bucket MY_BUCKET [--wordlist WORDLIST] (--role | --user) Enumerate IAM/Users of an AWS account. You must provide your OWN AWS account and bucket optional arguments: -h, --help show this help message and exit --id ID The account id of the target account --my_bucket MY_BUCKET The bucket used for testing (belongs to you) --wordlist WORDLIST Wordlist containers user/role names --role Search for a IAM Role --user Search for a IAM User ","description":"Leverage cross account behaviors to enumerate IAM users and roles in a different AWS account without authentication","id":7,"section":"aws","tags":null,"title":"Unauthenticated Enumeration of IAM Users and Roles","uri":"https://hackingthe.cloud/aws/enumeration/enum_iam_user_role/"}]