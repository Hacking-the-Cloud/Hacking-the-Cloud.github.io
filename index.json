[{"content":"Original Research: Ian Williams\nLink to Tool: GitHub\nWhen performing an AWS assessment you will likely encounter IAM Credentials. Traditionally, the majority of these that you would find would only be usable from the AWS CLI. Using a tool called AWS Consoler you can create links that will allow you to access the AWS Console. In this example we will walk through gathering credentials and using those credentials along with Consoler to generate a Console link.\nFirst, we need to gather valid IAM credentials. These are typically found a number of different ways. In this example, we have shell access to an EC2 instance with an attached role and we will curl the metadata service to access them.\nNext, install and compile AWS Consoler (install Python dependencies with pip and then do a sudo make install).\nFrom here invoke the Consoler tool and provide the -a (access key) -s (secret access key) and -t (session token) flags along with the retrieved values.\nThis will generate a link you can use to access the AWS Console.\n","description":"Leverage stolen credentials to use the AWS Console","id":0,"section":"aws","tags":null,"title":"AWS Consoler","uri":"https://hackingthe.cloud/aws/persistence/aws_consoler/"},{"content":"Security Groups in AWS have an interesting capability known as Connection Tracking. This allows the security groups to track information about the network traffic and allow/deny that traffic based on the Security Group rules.\nThere are two kinds of traffic flows; tracked and untracked. For example the AWS documentation mentions a tracked flow as the following, \u0026ldquo;if you initiate an ICMP ping command to your instance from your home computer, and your inbound security group rules allow ICMP traffic, information about the connection (including the port information) is tracked. Response traffic from the instance for the ping command is not tracked as a new request, but rather as an established connection and is allowed to flow out of the instance, even if your outbound security group rules restrict outbound ICMP traffic\u0026rdquo;.\nAn interesting side effect of this is that tracked connections are allowed to persist, even after a Security Group rule change.\nLet\u0026rsquo;s take a simple example: There is an EC2 instance that runs a web application. This EC2 instance has a simple Security Group that allows SSH, port 80, and port 443 inbound, and allows all traffic outbound. This EC2 instance is in a public subnet and is internet facing.\nWhile performing a penetration test you\u0026rsquo;ve gained command execution on this EC2 instance. In doing so, you pop a simple reverse shell. You work your magic on the box before eventually triggering an alert to our friendly neighborhood defender. They follow their runbooks which may borrow from the official AWS whitepaper on incident response.\nAs part of the \u0026ldquo;Isolate\u0026rdquo; step, the typical goal is to isolate the affected EC2 instance with either a restrictive Security Group or an explicit Deny NACL. The slight problem with this is that NACLs affect the entire subnet, and if you are operating in a space with a ton of EC2 instances the defender is unlikely to want to cause an outage for all of them. As a result, swapping the Security Group is the recommended procedure.\nThe defender switches the Security Group from the web and ssh one, to one that does not allow anything inbound or outbound.\nThe beauty of connection tracking is that because you\u0026rsquo;ve already established a connection with your shell, it will persist. So long as you ran the shell before the SG change, you can continue scouring the box and looking for other vulnerabilities.\nTo be clear, if the restrictive security group doesn\u0026rsquo;t allow for any outbound rules we won\u0026rsquo;t be able to communicate out (and if you\u0026rsquo;re using a beaconing C2 that will not function).\n","description":"Security Groups are Wacky","id":1,"section":"aws","tags":null,"title":"Connection Tracking","uri":"https://hackingthe.cloud/aws/general-knowledge/connection-tracking/"},{"content":"Last updated: 07/27/2020\nSource\n   Prefix Entity Type     ABIA AWS STS service bearer token   ACCA Context-specific credential   AGPA Group   AIDA IAM user   AIPA Amazon EC2 instance profile   AKIA Access key   ANPA Managed policy   ANVA Version in a managed policy   APKA Public key   AROA Role   ASCA Certificate   ASIA Temporary (AWS STS) keys    ","description":"Chart of the IAM ID Prefixes","id":2,"section":"aws","tags":null,"title":"IAM ID Identifiers","uri":"https://hackingthe.cloud/aws/general-knowledge/iam-key-identifiers/"}]